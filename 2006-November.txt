From cheungming at mail.berlios.de  Wed Nov  1 21:23:05 2006
From: cheungming at mail.berlios.de (cheungming at BerliOS)
Date: Wed, 1 Nov 2006 21:23:05 +0100
Subject: [Iometer-svn] r314 - in branches/IOMETER-restruct/iometer: . src
Message-ID: <200611012023.kA1KN5aa013693@sheep.berlios.de>

Author: cheungming
Date: 2006-11-01 21:23:04 +0100 (Wed, 01 Nov 2006)
New Revision: 314

Added:
   branches/IOMETER-restruct/iometer/INSTALL
Modified:
   branches/IOMETER-restruct/iometer/CHANGELOG
   branches/IOMETER-restruct/iometer/src/IOTargetDisk.cpp
Log:
added INSTALL file, update CHANGELOG to reflect the changes, and cosmetic changes.



Modified: branches/IOMETER-restruct/iometer/CHANGELOG
===================================================================
--- branches/IOMETER-restruct/iometer/CHANGELOG	2006-10-31 14:53:26 UTC (rev 313)
+++ branches/IOMETER-restruct/iometer/CHANGELOG	2006-11-01 20:23:04 UTC (rev 314)
@@ -4,6 +4,20 @@
 
 
 
+ChangeLog (IOMETER2 - 200X.XX.XX):
+==================================
+
+- New features:
+   - Added a simple INSTALL file about how to install iometer and dynamo on 
+     various platforms.
+
+- Bug fixes:
+   - Patch by Ming Zhang to get CPU count from /proc/cpuinfo under Linux. Old
+     glibc way is buggy for 64bit Linux and XEN.
+
+- Cleanup:
+   -
+
 ChangeLog (IOMETER2 - 2006.07.27):
 ==================================
 

Added: branches/IOMETER-restruct/iometer/INSTALL
===================================================================
--- branches/IOMETER-restruct/iometer/INSTALL	2006-10-31 14:53:26 UTC (rev 313)
+++ branches/IOMETER-restruct/iometer/INSTALL	2006-11-01 20:23:04 UTC (rev 314)
@@ -0,0 +1,64 @@
+Installation notes
+==================
+
+You can install IoMeter from pre-compiled binaries or from source files. 
+Because IoMeter contains two major components, IoMeter and dynamo, both 
+components need to be installed properly.
+
+IoMeter can only be installed in a Windows environment like Windows 2000,
+Windows XP, Windows 2003. Dynamo can be installed on a wide range of OS
+including Windows, Linux, Solaris, Mac OS X, and Netware.
+
+IoMeter.exe Installation From Pre-compiled Binaries
+===================================================
+
+   The easiest way to install IoMeter.exe is from the installer package 
+like iometer-200X.XX.XX.win32.i386-setup.exe. Simply run the setup program
+and follow the instruction in each page will finish the installation process.
+
+IoMeter.exe Installation From Source Files
+==========================================
+
+   You have to compile the IoMeter.exe from source files. There are two ways
+to do so. One is using the Visual C++ and another is to use DDK. For Visual 
+C++, version 6.0 and 2002 is known to work. Newer Visual C++ should be OK as well.
+Open the IoMeter project file with Visual C++ and compile the binaries. For DDK users,
+I assumed you are proficient enough to know how to compile.
+
+Dynamo Installation From Pre-compiled Binaries
+==============================================
+
+   For Windows, dynamo.exe is contained in same installer like 
+iometer-200X.XX.XX.win32.i386-setup.exe as IoMeter.exe. Follow same instruction
+as IoMeter.exe
+
+   For other platforms, simply uncompress the binary archive. For example, for Linux
+on X86 platform, download the file iometer-200X_XX_XX.linux.i386-bin.tgz to a local directory,
+uncompress it with command "tar zxvf iometer-200X_XX_XX.linux.i386-bin.tgz". It will
+generate an iometer-200X_XX_XX.linux.i386-bin dir, and src/dynamo is the binary.
+
+Note: because of different glibc and Linux distribution like Debian or Redhat, it is quite
+possible that the pre-compiled dynamo binary cannot run on a certain Linux environment. Then
+you have to install dynamo from source files.
+
+Dynamo Installation From Source Files
+=====================================
+
+   For Windows, follow the same instruction as IoMeter, using Visual C++ or DDK.
+
+   For other platforms, try to use followed steps:
+   * Find out the OS and CPU architecture of the box you want to run dynamo on.
+     For example, Linux OS with a X86 CPU, or Solaris with a SPARC CPU;
+   * Check if file "Makefile-<OS>.<cpu>" available in source directory. If so, then
+     dynamo can run on such platform. For OS+CPU platform that is not available, report
+     to IoMeter mailing list to see if developer can provide the port for this OS+CPU
+     platform.
+   * Run "make -f Makefile-<OS>.<cpu> all" to build dynamo.
+
+Report a Problem
+================
+
+If you meet any problem during installation and compilation, you can post your question
+to <iometer-user at lists.sourceforge.net>. You need to provide information like OS type,
+version, Visual C++ version if used, gcc version if used, detailed error message, and etc.
+

Modified: branches/IOMETER-restruct/iometer/src/IOTargetDisk.cpp
===================================================================
--- branches/IOMETER-restruct/iometer/src/IOTargetDisk.cpp	2006-10-31 14:53:26 UTC (rev 313)
+++ branches/IOMETER-restruct/iometer/src/IOTargetDisk.cpp	2006-11-01 20:23:04 UTC (rev 314)
@@ -1283,8 +1283,6 @@
 {
 	// open_flag is a 
 	if (IsType(spec.type, LogicalDiskType)) {
-		// Ignore errors that occur if trying to open a floppy or CD-ROM with
-		// nothing in the drive.
 #if defined(IOMTR_OS_SOLARIS)
 		((struct File *)disk_file)->fd =
 		    open(file_name, O_RDWR | O_CREAT | O_LARGEFILE | open_flag, S_IRUSR | S_IWUSR);
@@ -1296,6 +1294,8 @@
 			   &((struct File *)disk_file)->fd);
 		((struct File *)disk_file)->type = LogicalDiskType;
 #elif defined(IOMTR_OS_WIN32) || defined(IOMTR_OS_WIN64)
+		// Ignore errors that occur if trying to open a floppy or CD-ROM with
+		// nothing in the drive.
 		SetErrorMode(SEM_FAILCRITICALERRORS);
 		disk_file = CreateFile(file_name, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ |
 				       FILE_SHARE_WRITE, NULL, OPEN_ALWAYS,



From cheungming at mail.berlios.de  Fri Nov  3 02:21:43 2006
From: cheungming at mail.berlios.de (cheungming at BerliOS)
Date: Fri, 3 Nov 2006 02:21:43 +0100
Subject: [Iometer-svn] r315 - in branches/IOMETER-restruct/iometer: . src
Message-ID: <200611030121.kA31LhZE016489@sheep.berlios.de>

Author: cheungming
Date: 2006-11-03 02:21:39 +0100 (Fri, 03 Nov 2006)
New Revision: 315

Modified:
   branches/IOMETER-restruct/iometer/CHANGELOG
   branches/IOMETER-restruct/iometer/src/IOCommon.h
   branches/IOMETER-restruct/iometer/src/IOPerformanceLinux.cpp
   branches/IOMETER-restruct/iometer/src/IOTime.cpp
   branches/IOMETER-restruct/iometer/src/Pulsar.cpp
Log:
fixed way to gather CPU utilization statistics under Linux.



Modified: branches/IOMETER-restruct/iometer/CHANGELOG
===================================================================
--- branches/IOMETER-restruct/iometer/CHANGELOG	2006-11-01 20:23:04 UTC (rev 314)
+++ branches/IOMETER-restruct/iometer/CHANGELOG	2006-11-03 01:21:39 UTC (rev 315)
@@ -12,6 +12,8 @@
      various platforms.
 
 - Bug fixes:
+   - Patch by Ming Zhang to fix the way to get CPU utilization statistics under
+     Linux.
    - Patch by Ming Zhang to get CPU count from /proc/cpuinfo under Linux. Old
      glibc way is buggy for 64bit Linux and XEN.
 

Modified: branches/IOMETER-restruct/iometer/src/IOCommon.h
===================================================================
--- branches/IOMETER-restruct/iometer/src/IOCommon.h	2006-11-01 20:23:04 UTC (rev 314)
+++ branches/IOMETER-restruct/iometer/src/IOCommon.h	2006-11-03 01:21:39 UTC (rev 315)
@@ -488,6 +488,9 @@
 
 #define SEND   1
 #define RECV   2
+
+#define SMLBUFSIZE 512 
+
 // ----------------------------------------------------------------------------
 #if defined(IOMTR_OSFAMILY_NETWARE) || defined(IOMTR_OSFAMILY_UNIX)
  //param does not contain a valid internet address
@@ -519,13 +522,6 @@
   #define AIO_NOTCANCELED	1
  #endif
 
- #if defined(IOMTR_OS_LINUX)
-  // different Linux kernel has different /proc/stat style.
-  // Currently we only support vanilla 2.4 and 2.6 alike
-  #define PROCSTATUNKNOWN	0x00
-  #define PROCSTAT24STYLE	0x01
-  #define PROCSTAT26STYLE	0x02
- #endif
 #endif
 // ----------------------------------------------------------------------------
 

Modified: branches/IOMETER-restruct/iometer/src/IOPerformanceLinux.cpp
===================================================================
--- branches/IOMETER-restruct/iometer/src/IOPerformanceLinux.cpp	2006-11-01 20:23:04 UTC (rev 314)
+++ branches/IOMETER-restruct/iometer/src/IOPerformanceLinux.cpp	2006-11-03 01:21:39 UTC (rev 315)
@@ -115,7 +115,6 @@
 #include "iomtr_kstat/iomtr_kstat.h"
 
 extern int kstatfd;
-extern int procstatstyle;
 
 //
 // Initializing system performance data.
@@ -309,9 +308,10 @@
 
 void Performance::Get_CPU_Counters(int snapshot)
 {
-	int numScans, c, i;
-	char tmpBuf[100];
-	__int64 jiffiesCpuNiceUtilization, jiffiesCpuidle, jiffiesCpuiowait, jiffiesCpuirq, jiffiesCpusoftirq;
+	int numScans, i;
+	char tmpBuf[SMLBUFSIZE], *b;
+	__int64 jiffiesCpuNiceUtilization, jiffiesCpuidle, jiffiesCpuiowait;
+	__int64 jiffiesCpuirq, jiffiesCpusoftirq, jiffiesCpusteal;
 	FILE *cpuStat;
 	struct cpu_data_type raw_cpu;
 
@@ -328,91 +328,71 @@
 	}
 
 	cpuStat = fopen("/proc/stat", "r");
-	assert(cpuStat != NULL);
-	switch (procstatstyle) {
-	case PROCSTAT24STYLE:
-		// First few rows of the /proc/stat output in 2.4 style.
-		// --------------------------------------------------------------------
-		// cpu  20969 2260 50042 1069377
-		// cpu0 20969 2260 50042 1069377
-		// page 1279455 540189
-		// swap 30 483
-		// intr 1896409 1142648 2 0 0 128558 0 0 0 2 0 34836 465132 4 0 91210 34017 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
-		// ...
-		// --------------------------------------------------------------------
-		fscanf(cpuStat, "cpu %*s %*s %*s %*s\n");
-		for (i = 0; i < processor_count; i++) {
-			numScans = fscanf(cpuStat, "%s", tmpBuf);
-			if ((numScans == 1) && (strlen(tmpBuf) >= 3) && (strncmp(tmpBuf, "cpu", 3) == 0)) {
-				fscanf(cpuStat, " %lld %lld %lld %*s\n",
-				       &raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot], &jiffiesCpuNiceUtilization,
-				       &raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot]);
-				raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot] += jiffiesCpuNiceUtilization;
-				raw_cpu_data[i][CPU_TOTAL_UTILIZATION][snapshot] =
-				    raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot] +
-				    raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot];
-				continue;
-			}
-			do {
-				c = getc(cpuStat);
-			} while ((c != '\n') && (c != EOF));
-			break;
-		}
-		for (;;) {
-			numScans = fscanf(cpuStat, "%s", tmpBuf);
-			if ((numScans == 1) && (strlen(tmpBuf) == 4) && (strncmp(tmpBuf, "intr", 4) == 0)) {
-				fscanf(cpuStat, " %lld ", &raw_cpu_data[0][CPU_IRQ][snapshot]);
-				break;
-			}
-			do {
-				c = getc(cpuStat);
-			} while ((c != '\n') && (c != EOF));
-			if (c == EOF) {
-				break;
-			}
-		}
-		break;
-	case PROCSTAT26STYLE:
-		// First feww rows of the /proc/stat output in 2.6 style
-		// cpu  31483 0 87972 461075 9775 1319 200
-		// cpu0 31483 0 87972 461075 9775 1319 200
-		// intr 6473496 5918277 10963 0 0 0 0 0 7 1 2 0 365055 154381 0 24810 0 0 
-		//...
-		fscanf(cpuStat, "cpu %*s %*s %*s %*s %*s %*s %*s\n");
-		for (i = 0; i < processor_count; i++) {
-			numScans = fscanf(cpuStat, "%s", tmpBuf);
-			if ((numScans == 1) && (strlen(tmpBuf) >= 3) && (strncmp(tmpBuf, "cpu", 3) == 0)) {
-				fscanf(cpuStat, " %lld %lld %lld %lld %lld %lld %lld\n",
-				       &raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot],
-				       &jiffiesCpuNiceUtilization,
-				       &raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot],
-				       &jiffiesCpuidle, &jiffiesCpuiowait, &jiffiesCpuirq, &jiffiesCpusoftirq);
-				raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot] += jiffiesCpuNiceUtilization;
-				raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot] +=
-				    jiffiesCpuirq + jiffiesCpusoftirq;
-				raw_cpu_data[i][CPU_TOTAL_UTILIZATION][snapshot] =
-				    raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot] +
-				    raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot];
-			}
-		}
-		for (;;) {
-			numScans = fscanf(cpuStat, "%s", tmpBuf);
-			if ((numScans == 1) && (strlen(tmpBuf) == 4) && (strncmp(tmpBuf, "intr", 4) == 0)) {
-				fscanf(cpuStat, " %lld ", &raw_cpu_data[0][CPU_IRQ][snapshot]);
-				break;
-			}
-			do {
-				c = getc(cpuStat);
-			} while ((c != '\n') && (c != EOF));
-			if (c == EOF) {
-				break;
-			}
-		}
-		break;
-	default:
-		// should never be here
-		cerr << "Can not get CPU performance data" << endl;
+	if (!cpuStat)
+		goto err_out;
+
+	// different kernel has quite different /proc/stat output. 
+	// First few rows of the /proc/stat output in 2.4 style.
+	// --------------------------------------------------------------------
+	// cpu  20969 2260 50042 1069377
+	// cpu0 20969 2260 50042 1069377
+	// page 1279455 540189
+	// swap 30 483
+	// intr 1896409 1142648 2 0 0 ...
+	// ...
+	// --------------------------------------------------------------------
+	// First few rows of the /proc/stat output in early 2.6 style
+	// cpu  31483 0 87972 461075 9775 1319 200
+	// cpu0 31483 0 87972 461075 9775 1319 200
+	// intr 6473496 5918277 10963 0 0 0 0 0 7 1 2 0 365055 154381 0 24810 0 0 
+	//...
+	// --------------------------------------------------------------------
+	// First few rows of the /proc/stat output in 2.6.11 or later style
+	// cpu  152192 5922 18433 1509327 67908 3064 5273 0
+	// cpu0 152192 5922 18433 1509327 67908 3064 5273 0
+	// intr 644038....
+	//
+	// followed code gain idea from procps package.
+
+	memset(tmpBuf, 0, SMLBUFSIZE);
+	b = fgets(tmpBuf, SMLBUFSIZE, cpuStat);
+	if (!b)
+		goto err_out;
+	
+	for (i = 0; i < processor_count; i++) {
+		int cpuid;
+
+		b = fgets(tmpBuf, SMLBUFSIZE, cpuStat);
+		if (!b)
+			goto err_out;
+		jiffiesCpuiowait = jiffiesCpuirq = jiffiesCpusoftirq = jiffiesCpusteal = 0;
+		numScans = sscanf(tmpBuf, "cpu%d %lld %lld %lld %lld %lld %lld %lld %lld\n",
+					&cpuid,
+					&raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot],
+					&jiffiesCpuNiceUtilization,
+					&raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot],
+					&jiffiesCpuidle, &jiffiesCpuiowait, &jiffiesCpuirq, 
+					&jiffiesCpusoftirq, &jiffiesCpusteal);
+		if (numScans < 4)
+			goto err_out;
+
+		raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot] += jiffiesCpuNiceUtilization;
+		raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot] +=
+			jiffiesCpuirq + jiffiesCpusoftirq;
+		raw_cpu_data[i][CPU_TOTAL_UTILIZATION][snapshot] =
+			raw_cpu_data[i][CPU_USER_UTILIZATION][snapshot] +
+			raw_cpu_data[i][CPU_PRIVILEGED_UTILIZATION][snapshot];
+		
 	}
+	fread(tmpBuf, sizeof(char), SMLBUFSIZE, cpuStat);
+	b = strstr(tmpBuf, "intr");
+	if (b)
+		sscanf(b,  "intr %Lu", &raw_cpu_data[0][CPU_IRQ][snapshot]);
+
+	goto out;
+err_out:
+	cerr << "Can not get CPU performance data" << endl;
+out:
 	fclose(cpuStat);
 }
 
@@ -421,20 +401,17 @@
 	FILE *fp;
 	__int64 insegs, outsegs, retranssegs;
 	struct tcp_data_type raw_tcp;
+	char tmpBuf[SMLBUFSIZE];
+	int i;
 
 	if (kstatfd > 0 && ioctl(kstatfd, IM_IOC_GETTCPDATA, &raw_tcp) >= 0) {
 		raw_tcp_data[TCP_SEGMENTS_RESENT][snapshot] = raw_tcp.retranssegs;
 		return;
 	}
-	// DF: a kind of stupid workable solution. :)
 	fp = fopen("/proc/net/snmp", "r");
-	fscanf(fp, "Ip: %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s\n");
-	fscanf(fp, "Ip: %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s\n");
-	fscanf(fp,
-	       "Icmp: %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s\n");
-	fscanf(fp,
-	       "Icmp: %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s\n");
-	fscanf(fp, "Tcp: %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s\n");
+	for (i = 0; i < 5; i++)
+		fgets(tmpBuf, SMLBUFSIZE, fp);
+	retranssegs = 0;
 	fscanf(fp, "Tcp: %*s %*s %*s %*s %*s %*s %*s %*s %*s %lld %lld %lld %*s %*s\n", &insegs, &outsegs,
 	       &retranssegs);
 	raw_tcp_data[TCP_SEGMENTS_RESENT][snapshot] = retranssegs;

Modified: branches/IOMETER-restruct/iometer/src/IOTime.cpp
===================================================================
--- branches/IOMETER-restruct/iometer/src/IOTime.cpp	2006-11-01 20:23:04 UTC (rev 314)
+++ branches/IOMETER-restruct/iometer/src/IOTime.cpp	2006-11-03 01:21:39 UTC (rev 315)
@@ -89,55 +89,38 @@
 /* ##                                                                     ## */
 /* ######################################################################### */
 
-// Include our central headerfile
 #include "IOCommon.h"
 
 #if defined(IOMTR_OS_LINUX)
 #include "iomtr_kstat/iomtr_kstat.h"
 
 extern int kstatfd;
-extern int procstatstyle;
 #endif
 
-#if defined(IOMTR_CPU_PPC)
-#endif
-
-// Implements the time measurment functions
-// for / in the different plattforms
-// ----------------------------------------------------------------------------
 #if defined(IOMTR_OS_LINUX)
 DWORDLONG jiffies(void)
 {
-	DWORDLONG jiffies_user, jiffies_nice, jiffies_system, jiffies_idle, jiffies_iowait, jiffies_irq,
-	    jiffies_softirq;
+	DWORDLONG j[8], jf;
 	FILE *fp;
-	unsigned long long jf;
+	char tmpBuf[SMLBUFSIZE];
+	int i;
 
-	if (kstatfd > 0 && ioctl(kstatfd, IM_IOC_GETCURJIFFIES, &jf) >= 0) {
-		//printf("JIFFIE: %llu\n", jf);
-		return (DWORDLONG) jf;
+	if (kstatfd > 0 && ioctl(kstatfd, IM_IOC_GETCURJIFFIES, (unsigned long long*)&jf) >= 0) {
+		return jf;
 	}
 
-	switch (procstatstyle) {
-	case PROCSTAT24STYLE:
-		fp = fopen("/proc/stat", "r");
-		fscanf(fp, "cpu %*s %*s %*s %*s\n");
-		fscanf(fp, "cpu0 %lld %lld %lld %lld\n", &jiffies_user, &jiffies_nice, &jiffies_system, &jiffies_idle);
-		fclose(fp);
-		return (jiffies_user + jiffies_nice + jiffies_system + jiffies_idle);
-	case PROCSTAT26STYLE:
-		fp = fopen("/proc/stat", "r");
-		fscanf(fp, "cpu %*s %*s %*s %*s %*s %*s %*s\n");
-		fscanf(fp, "cpu0 %lld %lld %lld %lld %lld %lld %lld\n", &jiffies_user, &jiffies_nice, &jiffies_system,
-		       &jiffies_idle, &jiffies_iowait, &jiffies_irq, &jiffies_softirq);
-		fclose(fp);
-		return (jiffies_user + jiffies_nice + jiffies_system + jiffies_idle + jiffies_iowait + jiffies_irq +
-			jiffies_softirq);
-	default:
-		// should never be here
-		cerr << "Can not get jiffies value!" << endl;
-	}
-	return 0;
+	for (i = 0; i < 8; i++)
+		j[i] = 0;
+	fp = fopen("/proc/stat", "r");
+	fgets(tmpBuf, SMLBUFSIZE, fp);
+	fgets(tmpBuf, SMLBUFSIZE, fp);
+	sscanf(tmpBuf, "cpu0 %lld %lld %lld %lld %lld %lld %lld %lld\n", 
+			j, j + 1, j + 2, j + 3, j + 4, j + 5, j + 6, j + 7);
+	fclose(fp);
+	jf = 0;
+	for (i = 0; i < 8; i++)
+		jf += j[i];
+	return jf;
 }
 
 #if defined(IOMTR_CPU_I386) || defined(IOMTR_CPU_X86_64)

Modified: branches/IOMETER-restruct/iometer/src/Pulsar.cpp
===================================================================
--- branches/IOMETER-restruct/iometer/src/Pulsar.cpp	2006-11-01 20:23:04 UTC (rev 314)
+++ branches/IOMETER-restruct/iometer/src/Pulsar.cpp	2006-11-03 01:21:39 UTC (rev 315)
@@ -141,7 +141,6 @@
 #include <synch.h>
 #elif defined(IOMTR_OS_LINUX)
 int kstatfd;
-int procstatstyle = PROCSTATUNKNOWN;
 #elif defined(IOMTR_OS_OSX)
   // nop
 #else
@@ -199,24 +198,6 @@
 		close(fd);
 }
 
-int DetectProcStatStyle(void)
-{
-	FILE *fp;
-	unsigned long long x1, x2, x3, x4, x5, x6, x7;
-	int res;
-
-	// a simple work around to detect stat style. should check more customized kernels.
-	fp = fopen("/proc/stat", "r");
-	res = fscanf(fp, "cpu %lld %lld %lld %lld %lld %lld %lld\n", &x1, &x2, &x3, &x4, &x5, &x6, &x7);
-	if (res == 4)
-		return PROCSTAT24STYLE;
-	else if (res == 7)
-		return PROCSTAT26STYLE;
-	else
-		cerr << "Fail to detect the style of /proc/stat output." << endl;
-	return PROCSTATUNKNOWN;
-}
-
 #if defined(IOMTR_CPU_XSCALE)
 
 int ccntfd;
@@ -355,11 +336,6 @@
 	aioDefaults.aio_threads = 2;
 	aio_init(&aioDefaults);
 	kstatfd = InitIoctlInterface();
-	procstatstyle = DetectProcStatStyle();
-	if (kstatfd < 0 && procstatstyle == -1) {
-		cerr << "IoMeter can not get correct status information" << endl;
-		exit(1);
-	}
 #if defined(IOMTR_CPU_XSCALE)
 	if ((ccntfd = InitCCNTInterface()) < 0) {
 		exit(1);



